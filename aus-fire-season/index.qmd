---
title: "Bushfire season: then and now"
subtitle: "Changes in frequency of high fire danger days (in the worst 10% of days)"
format:
  360-embed-html: default
360embed:
  before: |
    &lt;iframe allow=&quot;fullscreen&quot; allowfullscreen=&quot;true&quot; src=&quot;
  # uncomment and modify this line for production
  # url: https://feb2023.360info-heatmaps-narclim.pages.dev/news/
  after: |
    &quot; title=&quot;Interactive: future heat&quot; style=&quot;width:100%; height:500px; border:none; background-color: white;&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;
---

{{< include _popup-buttons.qmd >}}

```{ojs}
//| label: load-data
import { aq, op } from "@uwdata/arquero"
seasons = aq.loadCSV("/data/ffdi-firegions-seasonal-thenandnow.csv", {
  parse: {
    DIST_NO: Number,
    DIST_NAME: String,
    slug: String,
    month: String,
    n_gte_90_1970_1994: Number,
    n_gte_90_1995_2019: Number,
    p_gte_90_1970_1994: Number,
    p_gte_90_1995_2019: Number
  }
})
```

```{ojs}
//| label: pick-region

regionMap = seasons
  .select("DIST_NAME", "slug")
  .dedupe("DIST_NAME", "slug")
  .orderby("DIST_NAME")
  .derive({ map: d => [d.DIST_NAME, d.slug]})
  .array("map")
viewof regionSelect = Inputs.select(new Map(regionMap))

filteredData = seasons
  .params({ regionSelect: regionSelect })
  .filter(d => d.slug == regionSelect)
  .derive({
      navg_then: d => d.n_1970_1995 / 25,
      navg_now: d => d.n_1995_2020 / 25,
  })
```

```{ojs}
//| label: plot
Plot = import("https://esm.run/@observablehq/plot")

fullMonths = ({
  "Jan": "January",
  "Feb": "February",
  "Mar": "March",
  "Apr": "April",
  "May": "May",
  "Jun": "June",
  "Jul": "July",
  "Aug": "August",
  "Sep": "September",
  "Oct": "October",
  "Nov": "November",
  "Dec": "December"
})

Plot.legend({
  color: {
    type: "ordinal",
    domain: ["Then (July 1970 to June 1995)", "Now (July 1995 to June 2020)"],
    range: ["gold", "orangered"]
  },
  style: {
    fontSize: 24,
    fontFamily: "Roboto Condensed"
  }
})

Plot.plot({
  marks: [
    // patterns: stripes up (for more risk now) or down (for less risk)
    // () => svg`<defs>
    //   <pattern id="stripes-more" x="0" y="0" width="20" height="20">
    //     <rect width="20" height="20" fill="orange" />
    //     <line stroke="red" x1="0" y1="0" x2="10" y2="10"/>
    //     <line stroke="red" x1="10" y1="10" x2="20" y2="0"/>
    //   </pattern>
    // </defs>`,
    // () => svg`<defs>
    //   <pattern id="stripes-less" x="0" y="0" width="20" height="20">
    //     <rect width="20" height="20" fill="lightblue" />
    //     <line stroke="blue" x1="0" y1="10" x2="10" y2="0"/>
    //     <line stroke="blue" x1="10" y1="0" x2="20" y2="10"/>
    //   </pattern>
    // </defs>`,
    () => svg`
      <linearGradient id="stripes-more" gradientTransform="rotate(90)">
        <stop offset="15%" stop-color="red" />
        <stop offset="25%" stop-color="orangered" />
        <stop offset="85%" stop-color="gold" />
      </linearGradient>`,
    () => svg`
      <linearGradient id="stripes-less" gradientTransform="rotate(90)">
        <stop offset="15%" stop-color="gold" />
        <stop offset="75%" stop-color="orangered" />
        <stop offset="100%" stop-color="red" />
      </linearGradient>`,
    Plot.ruleY([0]),
    // Plot.areaY(filteredData, {
    //   x: "month",
    //   y: "navg_then",
    //   fill: "gold",
    //   fillOpacity: 0.8
    // }),
    // Plot.areaY(filteredData, {
    //   x: "month",
    //   y1: "navg_then",
    //   y2: "navg_now",
    //   // mix-blend-mode: difference or exclusion set in css
    //   fill: "orangered",
    //   fillOpacity: 0.8
    // }),
    Plot.barY(filteredData, {
      x: "month",
      y1: "navg_then",
      y2: "navg_now",
      // fill: d => d.navg_now > d.navg_then ? "firebrick": "green"
      fill: d => d.navg_now > d.navg_then ?
        "url(#stripes-more)" :
        "url(#stripes-less)",
      fillOpacity: 0.9
      // fill: "url(#stripes-up)"
    }),
    Plot.dot(filteredData, {
      x: "month",
      y: "navg_then",
      fill: "gold",
      stroke: "black",
      r: 9
    }),
    Plot.dot(filteredData, {
      x: "month",
      y: "navg_now",
      fill: "orangered",
      stroke: "black",
      r: 9
    }),
    Plot.arrow(filteredData, {
      x: "month",
      y1: "navg_then",
      y2: "navg_now",
      inset: 20,
      stroke: "black",
      // strokeOpacity: 0.9,
      strokeWidth: 1
      // strokeDashArray: "dot"
    }),
    // // pointed arrow
    // Plot.arrow(filteredData, Plot.pointerX({
    //   x: "month",
    //   y1: "navg_then",
    //   y2: "navg_now",
    //   inset: 10,
    //   stroke: "#660000",
    //   strokeWidth: 3
    // })),
    Plot.tip(filteredData, Plot.pointer({
      x: "month",
      y1: "navg_then",
      y2: "navg_now",
      channels: {
        Then: d => `Average ${d3.format("0.1f")(d.navg_then)} ${fullMonths[d.month]} days a year`,
        Now: d => `Average ${d3.format("0.1f")(d.navg_now)} ${fullMonths[d.month]} days a year`
      },
      format: {
        Then: true,
        Now: true,
        x: false,
        y: false,
      },
      lineHeight: 1.5,
      stroke: "none",
      fillOpacity: 0.85,
      pointerSize: 0
    }))
  ],
  x: {
    label: null,
    domain: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep",
      "Oct", "Nov", "Dec"],
    // padding: 0
    padding: 0.71
  },
  y: {
    label: "Average days per year",
    grid: true
  },
  insetTop: 15,
  marginTop: 30,
  marginBottom: 30,
  style: {
    fontSize: 20,
    fontFamily: "Roboto Condensed"
  },
  width: 900,
    height: 600
})
```

{{< include _popup-dialogs.qmd >}}
